colors:
  # Default colors
  primary:
    background: '0x000000'
    foreground: '0xffffff'

  # Normal colors
  normal:
    black:   '0x1c1c1c'
    red:     '0xd770af'
    green:   '0x9acc79'
    yellow:  '0xd0d26b'
    blue:    '0x77b6c5'
    magenta: '0xa488d9'
    cyan:    '0x7fcab3'
    white:   '0x8d8d8d'

  # Bright colors
  bright:
    black:   '0x3d3a3a'
    red:     '0xd28abf'
    green:   '0x8fb676'
    yellow:  '0xc8bc45'
    blue:    '0x8fa7b9'
    magenta: '0xbd89de'
    cyan:    '0x6ec2a8'
    white:   '0xdad3d3'

env:
  TERM: xterm-256color

window:
  dimensions:
    columns: 55
    lines: 20

  # position:
  #   x: 0
  #   y: 0

  padding:
    x: 10
    y: 10
  dynamic_padding: false

  title: Alacritty
  class: Alacritty

font:
  normal:
    family: DejaVu Sans Mono for Powerline
    style: Regular

  size: 13 
  
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  hide_when_typing: true

  url:
    launcher:
      program: xdg-open
    modifiers: None

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: false

# Allow terminal applications to change Alacritty's window title.
dynamic_title: true

cursor:
  # Cursor style
  #
  # Values for `style`:
  #   - ▇ Block
  #   - _ Underline
  #   - | Beam
  style: Block

  # If this is `true`, the cursor will be rendered as a hollow box when the
  # window is not focused.
  unfocused_hollow: false

live_config_reload: true

#shell:
#  program: /bin/bash

working_directory: None

enable_experimental_conpty_backend: true

# Send ESC (\x1b) before characters when alt is pressed.
alt_send_esc: true

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false

  # Record all characters and escape sequences as test data.
  ref_test: false

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
key_bindings:
  - { key: V,       mods: Control|Shift,  action: Paste            }
  - { key: C,       mods: Control|Shift,  action: Copy             }
  - { key: Return,  mods: Alt,            action: ToggleFullscreen }
  - { key: Add,     mods: Control|Shift,  action: ResetFontSize    }
  - { key: Minus,   mods: Control,        action: DecreaseFontSize }
  - { key: Add,     mods: Control,        action: IncreaseFontSize }
  - { key: K,       mods: Control|Shift,  action: ScrollLineUp     }
  - { key: J,       mods: Control|Shift,  action: ScrollLineDown   }
  - { key: F,       mods: Control|Shift,  action: ScrollPageDown   }
  - { key: B,       mods: Control|Shift,  action: ScrollPageUp     }
